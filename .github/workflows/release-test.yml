name: 🚀 Create Release Test

on:
  # This action is triggered manually.
  workflow_dispatch:
    inputs:
      version:
        description: 'The version number of this release. Runs `npm version`.'
        required: true
        default: 'patch'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

changelog:
  exclude:
    authors:
      - dependabot

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_ADMIN_TOKEN }}

      - uses: actions/setup-node@v1
        with:
          node-version: 20

      - name: ⚙️ Configure git
        run: |
          git config user.name $GITHUB_ACTOR
          git config user.email gh-actions-${GITHUB_ACTOR}@github.com

      - name: ⚙️ Setup PHP with tools
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer:v2

      - name: ⚙️ Get project slug
        id: package
        run: echo "slug=$(node -p "require('./package.json').slug")" >> $GITHUB_OUTPUT

      - name: 💾 Get node.js cache directory
        id: node-cache-dir
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT # Use $(yarn cache dir) for yarn

      - name: 💾 Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.node-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # Use '**/yarn.lock' for yarn
          restore-keys: ${{ runner.os }}-node-

      - name: 💾 Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: ⚙️ Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: ⚙️ Install Composer Packages
        run: composer install --prefer-dist

      - name: ⚙️ Install Node Packages
        run: npm ci

      - name: Check Status
        run: git status

      - name: 🔼 Bump version
        run: npm version ${{ github.event.inputs.version }} -m 'Tagging %s'

      - name: ⚙️ Get new version
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Push the version to git
        run: |
            git push
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}

      - name: 🚀 Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          tag_name: v${{ steps.version.outputs.version }}
